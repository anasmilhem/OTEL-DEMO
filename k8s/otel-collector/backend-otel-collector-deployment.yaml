apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: backend-collector
  namespace: dynatrace
spec:
  managementState: "managed"
  serviceAccount: collector
  mode: "deployment"
  replicas: 1
  image: "ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest"
  envFrom:
    - secretRef:
        name: dynatrace-otelcol-dt-api-credentials
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
  observability:
    metrics:
      enableMetrics: true
  resources:
    limits:
      memory: 1024Mi
  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: backend-opentelemetry-collector
              scrape_interval: 30s
              static_configs:
                - targets:
                    - ${MY_POD_IP}:8888
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    processors:
      cumulativetodelta: {}
      filter/histogram:
        error_mode: ignore
        metrics:
          metric:
            - "type == METRIC_DATA_TYPE_HISTOGRAM"
      batch:
        send_batch_max_size: 2000
        timeout: 30s
        send_batch_size: 1500
      resource:
        attributes:
          - key: k8s.pod.ip
            action: delete
          - key: k8s.cluster.name
            value: anas-otel
            action: insert
          - key: dt.security_context
            from_attribute: k8s.cluster.name
            action: insert
      attributes:
        actions:
          - key: telemetry.sdk.name
            value: opentelemetry
            action: insert
          - key: dynatrace.otel.collector
            value: backend-collector
            action: insert
      resourcedetection/azure:
        detectors: [env, azure]
        timeout: 2s
        override: false
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.replicaset.name
            - k8s.statefulset.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.container.name
            - container.id
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection

    exporters:
      otlphttp/dynatrace:
        endpoint: "${env:DT_ENDPOINT}"
        headers:
          Authorization: "Api-Token ${env:DT_API_TOKEN}"
      debug:
        verbosity: detailed
        sampling_initial: 1
        sampling_thereafter: 5

    service:
      telemetry:
        logs:
          level: "info"
        metrics:
          level: "detailed"
      pipelines:
        # traces:
        #     receivers: [otlp]
        #     processors:
        #       [k8sattributes, resourcedetection/azure, resource, attributes, batch]
        #     exporters: [otlphttp/dynatrace]
        metrics:
          receivers: [otlp]
          processors: [k8sattributes, resourcedetection/azure, resource, attributes, cumulativetodelta, batch]
          exporters: [otlphttp/dynatrace] 