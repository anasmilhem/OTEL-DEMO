---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: dynatrace-events
  namespace: dynatrace
spec:
  serviceAccount: collector
  managementState: "managed"
  env:
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
  envFrom:
    - secretRef:
        name: dynatrace-otelcol-dt-api-credentials
  mode: "deployment"
  image: "otel/opentelemetry-collector-contrib:0.103.0"
  resources:
    limits:
      memory: 512Mi
  config:
    receivers:

    processors:
      batch:
        send_batch_max_size: 2000
        timeout: 30s
        send_batch_size: 1500
      resource:
        attributes:
          - key: k8s.pod.ip
            action: delete
          - key: k8s.cluster.name
            value: anas-otel
            action: insert
          - key: dt.security_context
            from_attribute: k8s.cluster.name
            action: insert
          - key: telemetry.sdk.name
            value: opentelemetry
            action: insert
          - key: dynatrace.otel.collector
            value: dynatrace-events
            action: insert
      resourcedetection/gcp:
        detectors: [env, gcp]
        timeout: 2s
        override: false
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.replicaset.name
            - k8s.statefulset.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.container.name
            - container.id
            - container.image.name
            - container.image.tag
          labels:
            # Extracts the value of a namespaces label with key `label1` and inserts it as a resource attribute with key `l1`
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
        pod_association: # How to associate the data to a pod (order matters)
          - sources: # First try to use the value of the resource attribute k8s.pod.ip
              - from: resource_attribute
                name: k8s.pod.uid
          - sources: # Then try to use the value of the resource attribute k8s.pod.uid
              - from: resource_attribute
                name: k8s.pod.name
          - sources: # If neither of those work, use the request's connection to get the pod IP.
              - from: connection

    exporters:
      otlphttp/dynatrace:
        endpoint: "${env:DT_ENDPOINT}"
        headers:
          Authorization: "Api-Token ${env:DT_API_TOKEN}"

    service:
      pipelines:
        logs:
          receivers: []
          processors: [resourcedetection/gcp, resource, k8sattributes, batch]
          exporters: [otlphttp/dynatrace]
        metrics:
          receivers: []
          processors: [resourcedetection/gcp, resource, k8sattributes, batch]
          exporters: [otlphttp/dynatrace]
