name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: "registry.digitalocean.com/otel-demo"
  CLUSTER_NAME: "k8s-1-31-1-do-4-nyc1-1732046844928"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Set Image Tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build backend image
        working-directory: ./backend
        run: |
          docker build -t ${{ env.REGISTRY }}/opentelemetry-demo-backend:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/opentelemetry-demo-backend:${{ env.IMAGE_TAG }}

      - name: Build frontend image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.REGISTRY }}/opentelemetry-demo-frontend:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/opentelemetry-demo-frontend:${{ env.IMAGE_TAG }}

      - name: Build load-generator image
        working-directory: ./load-generator
        run: |
          docker build -t ${{ env.REGISTRY }}/opentelemetry-demo-load-generator:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/opentelemetry-demo-load-generator:${{ env.IMAGE_TAG }}

      - name: Update deployment files
        run: |
          sed -i "s|image: registry.digitalocean.com/otel-demo/opentelemetry-demo-backend:.*|image: ${{ env.REGISTRY }}/opentelemetry-demo-backend:${{ env.IMAGE_TAG }}|" k8s/backend/deployment.yaml
          sed -i "s|image: registry.digitalocean.com/otel-demo/opentelemetry-demo-frontend:.*|image: ${{ env.REGISTRY }}/opentelemetry-demo-frontend:${{ env.IMAGE_TAG }}|" k8s/frontend/deployment.yaml
          sed -i "s|image: registry.digitalocean.com/otel-demo/opentelemetry-demo-load-generator:.*|image: ${{ env.REGISTRY }}/opentelemetry-demo-load-generator:${{ env.IMAGE_TAG }}|" k8s/load-generator/deployment.yaml

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save ${{ env.CLUSTER_NAME }}

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          # Create namespaces
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/do-registry.yaml
          
          # Deploy OTEL Collector and RBAC
          kubectl apply -f k8s/otel-collector/rbac.yaml
          kubectl apply -f k8s/otel-collector/otel-collector-daemonset.yaml
          
          # Wait for OTEL collector to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=dynatrace-logs-collector -n dynatrace --timeout=120s
          
          # Deploy application components
          kubectl apply -f k8s/database/mongodb.yaml
          kubectl wait --for=condition=ready pod -l app=mongodb -n custom-otel-app --timeout=120s
          kubectl apply -f k8s/backend/deployment.yaml -n custom-otel-app
          kubectl apply -f k8s/frontend/deployment.yaml -n custom-otel-app
          kubectl apply -f k8s/load-generator/deployment.yaml -n custom-otel-app

      - name: Verify deployment
        run: |
          # Verify OTEL collector deployment
          kubectl rollout status daemonset/dynatrace-logs-collector -n dynatrace
          
          # Verify application deployments
          kubectl rollout status deployment/backend -n custom-otel-app
          kubectl rollout status deployment/frontend -n custom-otel-app
          kubectl rollout status deployment/load-generator -n custom-otel-app
